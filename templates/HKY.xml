<beast version='2.0'
       namespace='beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

    <beauticonfig spec='beast.app.beauti.BeautiConfig'
        hidePanels='TAXON_SETS_PANEL,TIP_DATES_PANEL,PRIORS_PANEL,OPERATORS_PANEL'
        inputLabelMap='beast.core.MCMC.operator=Operators,
	        beast.core.MCMC.logger=Loggers'
        inlinePlugins ='beast.core.MCMC.distribution,
            beast.core.MCMC.logger,
            beast.evolution.sitemodel.SiteModel.substModel,
            beast.evolution.tree.coalescent.ExponentialGrowth,
            beast.evolution.tree.coalescent.ConstantPopulation,
            beast.evolution.tree.coalescent.Coalescent,
            beast.core.State.stateNode'
        suppressPlugins = 'beast.core.MCMC.operator,
	        beast.evolution.tree.coalescent.Coalescent.treeIntervals,
	        beast.evolution.tree.coalescent.Coalescent.tree,
	        beast.core.MCMC.state,
	        beast.core.MCMC.distribution,
	        beast.evolution.speciation.BirthDeathGernhard08Model.relativeDeathRate,
	        beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
	        beast.evolution.speciation.BirthDeathGernhard08Model.type,
	        beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
	        beast.evolution.speciation.BirthDeathGernhard08Model.tree,
	        beast.evolution.tree.Tree.trait,
	        beast.util.TreeParser.initial,
	        beast.util.TreeParser.taxa,
	        beast.util.TreeParser.trait,
	        beast.util.TreeParser.estimate,
	        beast.util.ClusterTree.initial,
	        beast.util.ClusterTree.taxa,
	        beast.util.ClusterTree.trait,
	        beast.util.ClusterTree.estimate,
	        beast.evolution.substitutionmodel.WAG.rates,
	        beast.evolution.substitutionmodel.WAG.frequencies'
        buttonLabelMap='beast.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters'
    >
    </beauticonfig>

<!--
done: scaler parameter/tree entry should be <none>
done: better parameter editor
done: handle StateNode estimate flag
done: substitution model: make datatype safe
done: SiteModelInputEditor that does implement enable gamma shape only if gamma categories >= 2
done: operator editor, with weights
done: default subst model for amino acids in standard template
done: WAG prevent inputs
done: save/load unused part of templates
done: support partial templates (subst.model, site.model templates)
done: state scrubbing?
TODO: spacing out of inputs
TODO: proper refreshs for multi partition sitemodel
TODO: trait editor
TODO: sequence inspector
TODO: custom panels
TODO: tree prior: select from tree priors instead of having a list?
TODO: prior editor with dynamic graphs of prior distribution
TODO: coalescent tree as initial tree - with taxa constraints
-->


    <data id="#alignments"/>


    <plate var='n' range='#alignments'>
        <mergepoint id='substitutionmodel'/>

        <!-- The HKY substitution model (Hasegawa, Kishino & Yano, 1985)             -->
        <input spec='HKY' id='$(n).hky'>
            <kappa idref='$(n).hky.kappa'/>
            <frequencies id='$(n).freqs' spec='Frequencies'>
                <data idref='$(n)'/>
            </frequencies>
        </input>

        <!-- The WAG empirical amino acidmodel  -->
        <!--input spec='WAG' id='$(n).WAG'/-->


        <input spec='TwoStateCovarion' id='$(n).TwoStateCovarion' alpha='0.1' switchingParameter='0.01' frequencies="@$(n).freqs"/>

        <!-- site model                                                              -->
        <input spec='SiteModel' id="$(n).siteModel" gammaCategoryCount='0'>
            <substModel idref='$(n).hky'/>
            <proportionInvariant idref='$(n).proportionInvariant'/>
            <mutationRate        idref='$(n).mutationRate'/>
            <shape               idref='$(n).gammaShape'/>
        </input>

        <input spec='TreeLikelihood' id="$(n).treeLikelihood">
            <data idref="$(n)"/>
            <tree idref="$(n).tree"/>
            <siteModel idref="$(n).siteModel"/>
            <branchRateModel spec='StrictClockModel' id='$(n).StrictClockModel'>
                <clock.rate id='$(n).clockRate' spec='parameter.RealParameter' value='1.0' estimate='false'/>
            </branchRateModel>
        </input>

	    <input spec='BirthDeathGernhard08Model' id="$(n).Yule" type='timesonly'>
 	    	<parameter name='birthDiffRate' id="$(n).birthRate" value="1.0" lower="0.0" upper="100.0"  estimate='false'/>
        	<parameter name='relativeDeathRate' id='$(n).constantDeathRate' value='1.0'  estimate='false'/>
        	<tree idref='$(n).tree'/>
    	</input>

        <input spec='UCRelaxedClockModel' id="$(n).RelaxedClock">
            <input id='$(n).lognormal' name='distribution' spec="beast.math.distributions.LogNormalDistributionModel">
                <parameter name='M' id='$(n).M' value="1" estimate='false'/>
                <parameter name='S' id='$(n).S' value="0.5" lower="0" upper="5" estimate='false'/>
            </input>
            <parameter spec='parameter.IntegerParameter' name='rateCategories' id='$(n).rateCategories' dimension="11" value="1"/>
            <input name='tree' idref="$(n).tree"/>
        </input>

        <populationModel spec="ExponentialGrowth" id="$(n).ExponentialGrowth">
            <parameter name="popSize" id="$(n).popSize" value='1.0' estimate='false'/>
            <parameter name="growthRate" id="$(n).growthRate" value='1.0' estimate='false'/>
        </populationModel>



        <parameter id="$(n).hky.kappa" value="1.0" lower="0.0" estimate='false'/>

        <tree spec='beast.evolution.tree.Tree' id='$(n).tree' initial='@$(n).upgmatree'>
	        <trait spec='beast.evolution.tree.TraitSet' traitname='date' units='year'
		        value=''>
		        <taxa idref='$(n)'/>
	        </trait>
        </tree>
        <input spec='beast.util.ClusterTree' id='$(n).upgmatree' clusterType='upgma' estimate='false'>
            <taxa idref='$(n)'/>
	        <trait spec='beast.evolution.tree.TraitSet' traitname='date' units='year'
		        value=''>
		        <taxa idref='$(n)'/>
	        </trait>
        </input>
        <input spec='beast.util.TreeParser' id='$(n).Newicktree'>
                <input name='newick'></input>
                <input name='taxa' idref='$(n)'/>
        </input>        

    </plate>





    <run spec="MCMC" id="mcmc" chainLength="10000000">
        <state storeEvery='100000'>
            <plate var='n' range='#alignments'>
                <stateNode idref="$(n).hky.kappa"/>
                <stateNode idref="$(n).tree"/>
        		<stateNode idref="$(n).birthRate"/>
        		<stateNode idref="$(n).growthRate"/>
                <stateNode idref='$(n).rateCategories'/>
                <stateNode id='$(n).proportionInvariant' spec='parameter.RealParameter' value='0.0' lower='0.0' upper='1.0' estimate='false'/>
                <stateNode id='$(n).mutationRate' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                <stateNode id='$(n).gammaShape' spec='parameter.RealParameter' value='1.0' estimate='false'/>
            </plate>
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior">
                <plate var='n' range='#alignments'>
                    <distribution id="$(n).coalescent" spec="Coalescent">
                        <treeIntervals spec='TreeIntervals' id='$(n).TreeIntervals'>
                             <tree idref="$(n).tree"/>
                        </treeIntervals>
                        <populationModel spec="ConstantPopulation" id='$(n).ConstantPopulation' popSize='@$(n).popSize'/>
                    </distribution>
                    <distribution id='$(n).kappa.prior' spec='Prior' x='@$(n).hky.kappa'>
                        <distribution spec="OneOnX"/>
                    </distribution>
                </plate>
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood">
                <plate var='n' range='#alignments'>
                    <distribution id='$(n).likelihood_' idref="$(n).treeLikelihood"/>
                </plate>
            </distribution>
        </distribution>
    
        <plate var='n' range='#alignments'>
            <mergepoint id='operator'/>
            <operator id='$(n).kappaScaler' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@$(n).hky.kappa"/>
            <operator id='$(n).proportionInvariantScaler' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@$(n).proportionInvariant"/>
            <operator id='$(n).mutationRateScaler' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@$(n).mutationRate"/>
            <operator id='$(n).gammaShapeScaler' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@$(n).gammaShape"/>

            <operator id='$(n).treeScaler' spec='ScaleOperator' scaleFactor="0.5" weight="1" tree="@$(n).tree"/>
            <operator spec='Uniform' weight="10" tree="@$(n).tree"/>
            <operator spec='SubtreeSlide' weight="5" gaussian="true" size="1.0" tree="@$(n).tree"/>
            <operator id='$(n).narrow' spec='Exchange' isNarrow='true' weight="1" tree="@$(n).tree"/>
            <operator id='$(n).wide' spec='Exchange' isNarrow='false' weight="1" tree="@$(n).tree"/>
            <operator spec='WilsonBalding' weight="1" tree="@$(n).tree"/>
	        <operator id='$(n).birthRateScaler' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@$(n).birthRate'/>
	        <operator id='$(n).growthRatecaler' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@$(n).growthRate'/>
            <operator id="$(n).categoriesRandomWalk" spec="IntUniformOperator" weight="1" parameter="@$(n).rateCategories"/>
        </plate>

        <logger logEvery="10000" fileName="$(n).$(seed).log">
	        <model idref='posterior'/>
            <log idref="likelihood"/>
            <plate var='n' range='#alignments'>
                <log idref='$(n).hky.kappa'/>
                <log spec='beast.evolution.tree.TreeHeightLogger' tree='@$(n).tree'/>
            </plate>
        </logger>
        <plate var='n' range='#alignments'>
            <logger logEvery="10000" fileName="$(n).$(seed).trees">
                <log idref="$(n).tree"/>
            </logger>
        </plate>
        <logger logEvery="10000">
	        <model idref='posterior'/>
            <log idref="likelihood"/>
      	    <ESS spec='ESS' name='log' arg="@likelihood"/>
            <plate var='n' range='#alignments'>
                <log idref='$(n).hky.kappa'/>
    	    <ESS spec='ESS' name='log' arg="@$(n).hky.kappa"/>
            </plate>
        </logger>
    </run>

</beast>

