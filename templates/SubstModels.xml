<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

<mergewith point='commonTemplates'>

<!-- substitution models -->
<!-- JC69 substitution model -->
        <subtemplate id='JC69' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.JukesCantor' mainid='JC69.$(n)'>
<![CDATA[
        <plugin spec='JukesCantor' id='JC69.$(n)'/>
]]>
        </subtemplate>

<!-- HKY substitution model -->
        <subtemplate id='HKY' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.HKY' mainid='hky.$(n)'>
<![CDATA[
        <plugin spec='HKY' id='hky.$(n)'>
            <parameter id="kappa.$(n)" name='kappa' value="1.0" lower="0.0" estimate='true'/>
            <frequencies id='estimatedFreqs.$(n)' spec='Frequencies'>
                <frequencies id='freqParameter.$(n)' spec='parameter.RealParameter' dimension='4' value='0.25' lower='0' upper='1'/>
            </frequencies>
        </plugin>

        <plugin id='KappaScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@kappa.$(n)"/>
        <plugin id='FrequenciesExchanger.$(n)' spec='DeltaExchangeOperator' delta="0.01" weight="0.1" parameter="@freqParameter.$(n)"/>

        <plugin id='KappaPrior.$(n)' spec='Prior' x='@kappa.$(n)'><distr spec="OneOnX"/></plugin>

]]>

            <connect spec='BeautiConnector' srcID='kappa.$(n)'                targetID='state' inputName='stateNode' if='inposterior(hky.$(n)) and kappa.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='freqParameter.$(n)'        targetID='state' inputName='stateNode' if='inposterior(hky.$(n)) and freqParameter.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='KappaScaler.$(n)'          targetID='mcmc' inputName='operator' if='inposterior(hky.$(n)) and kappa.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='FrequenciesExchanger.$(n)' targetID='mcmc' inputName='operator' if='inposterior(hky.$(n)) and freqParameter.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='kappa.$(n)'                targetID='tracelog' inputName='log'  if='inposterior(hky.$(n)) and kappa.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='freqParameter.$(n)'        targetID='tracelog' inputName='log'  if='inposterior(hky.$(n)) and freqParameter.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='KappaPrior.$(n)'           targetID='prior' inputName='distribution' if='inposterior(hky.$(n)) and kappa.$(n)/estimate=true'/>
        </subtemplate>

<!-- GTR substitution model -->
        <subtemplate id='GTR' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.HKY' mainid='gtr.$(n)'>
<![CDATA[
        <plugin spec='GTR' id='gtr.$(n)'>
            <parameter id="rateAC.$(n)" name='rateAC' value="1.0" lower="0.0" estimate='true'/>
            <parameter id="rateAG.$(n)" name='rateAG' value="1.0" lower="0.0" estimate='true'/>
            <parameter id="rateAT.$(n)" name='rateAT' value="1.0" lower="0.0" estimate='true'/>
            <parameter id="rateCG.$(n)" name='rateCG' value="1.0" lower="0.0" estimate='true'/>
            <parameter id="rateCT.$(n)" name='rateCT' value="1.0" lower="0.0" estimate='true'/>
            <parameter id="rateGT.$(n)" name='rateGT' value="1.0" lower="0.0" estimate='false'/>
            <frequencies id='freqs.$(n)' spec='Frequencies'>
                <frequencies id='freqParameter.$(n)' spec='parameter.RealParameter' dimension='4' value='0.25' lower='0' upper='1'/>
            </frequencies>
        </plugin>

        <operator id='RateACScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@rateAC.$(n)"/>
        <operator id='RateAGScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@rateAG.$(n)"/>
        <operator id='RateATScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@rateAT.$(n)"/>
        <operator id='RateCGScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@rateCG.$(n)"/>
        <operator id='RateCTScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@rateCT.$(n)"/>
        <operator id='RateGTScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@rateGT.$(n)"/>
        <operator id='FrequenciesExchanger.$(n)' spec='DeltaExchangeOperator' delta="0.01" weight="0.1" parameter="@freqParameter.$(n)"/>

        <prior id='RateACPrior.$(n)' spec='Prior' x='@rateAC.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
        <prior id='RateAGPrior.$(n)' spec='Prior' x='@rateAG.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
        <prior id='RateATPrior.$(n)' spec='Prior' x='@rateAT.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
        <prior id='RateCGPrior.$(n)' spec='Prior' x='@rateCG.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
        <prior id='RateCTPrior.$(n)' spec='Prior' x='@rateCT.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
        <prior id='RateGTPrior.$(n)' spec='Prior' x='@rateGT.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
]]>

            <connect spec='BeautiConnector' srcID='freqParameter.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and freqParameter.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateAC.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and rateAC.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateAG.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and rateAG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateAT.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and rateAT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateCG.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and rateCG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateCT.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and rateCT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateGT.$(n)' targetID='state' inputName='stateNode' if='inposterior(gtr.$(n)) and rateGT.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='FrequenciesExchanger.$(n)' targetID='mcmc' inputName='operator' if='inposterior(freqParameter.$(n)) and freqParameter.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateACScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(gtr.$(n)) and rateAC.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateAGScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(gtr.$(n)) and rateAG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateATScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(gtr.$(n)) and rateAT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateCGScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(gtr.$(n)) and rateCG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateCTScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(gtr.$(n)) and rateCT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateGTScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(gtr.$(n)) and rateGT.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='freqParameter.$(n)' targetID='tracelog' inputName='log' if='inposterior(freqParameter.$(n)) and freqParameter.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateAC.$(n)' targetID='tracelog' inputName='log' if='inposterior(gtr.$(n)) and rateAC.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateAG.$(n)' targetID='tracelog' inputName='log' if='inposterior(gtr.$(n)) and rateAG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateAT.$(n)' targetID='tracelog' inputName='log' if='inposterior(gtr.$(n)) and rateAT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateCG.$(n)' targetID='tracelog' inputName='log' if='inposterior(gtr.$(n)) and rateCG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateCT.$(n)' targetID='tracelog' inputName='log' if='inposterior(gtr.$(n)) and rateCT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateGT.$(n)' targetID='tracelog' inputName='log' if='inposterior(gtr.$(n)) and rateGT.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='RateACPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(gtr.$(n)) and rateAC.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateAGPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(gtr.$(n)) and rateAG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateATPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(gtr.$(n)) and rateAT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateCGPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(gtr.$(n)) and rateCG.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateCTPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(gtr.$(n)) and rateCT.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='RateGTPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(gtr.$(n)) and rateGT.$(n)/estimate=true'/>
        </subtemplate>


<!-- empirical amino acid substitution models -->
        <subtemplate id='Blosum62' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.Blosum62' mainid='Blosum62.$(n)'><!--value spec='XML'--><![CDATA[<plugin spec='Blosum62' id='Blosum62.$(n)'/>]]></subtemplate>
        <subtemplate id='Dayhoff' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.Dayhoff' mainid='Dayhoff.$(n)'><!--value spec='XML'--><![CDATA[<plugin spec='Dayhoff' id='Dayhoff.$(n)'/>]]></subtemplate>
        <subtemplate id='JTT' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.JTT' mainid='JTT.$(n)'><!--value spec='XML'--><![CDATA[<plugin spec='JTT' id='JTT.$(n)'/>]]></subtemplate>
        <subtemplate id='cpREV' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.CPREV' mainid='CPREV.$(n)'><!--value spec='XML'--><![CDATA[<plugin spec='CPREV' id='CPREV.$(n)'/>]]></subtemplate>
        <subtemplate id='mtREV' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.MTREV' mainid='MTREV.$(n)'><!--value spec='XML'--><![CDATA[<plugin spec='MTREV' id='MTREV.$(n)'/>]]></subtemplate>
        <subtemplate id='WAG' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.WAG' mainid='WAG.$(n)'><!--value spec='XML'--><![CDATA[<plugin spec='WAG' id='WAG.$(n)'/>]]></subtemplate>



<!-- frequency models -->
        <subtemplate id='Estimated' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.Frequencies' mainid='estimatedFreqs.$(n)'>
<![CDATA[
            <frequencies id='estimatedFreqs.$(n)' spec='Frequencies'>
                <frequencies id='freqParameter.$(n)' spec='parameter.RealParameter' dimension='4' value='0.25' lower='0' upper='1'/>
            </frequencies>

	        <plugin id='FrequenciesExchanger.$(n)' spec='DeltaExchangeOperator' delta="0.01" weight="0.1" parameter="@freqParameter.$(n)"/>
]]>
            <connect spec='BeautiConnector' srcID='freqParameter.$(n)' targetID='state' inputName='stateNode' if='inposterior(estimatedFreqs.$(n)) and freqParameter.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='FrequenciesExchanger.$(n)' targetID='mcmc' inputName='operator' if='inposterior(estimatedFreqs.$(n)) and freqParameter.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='freqParameter.$(n)' targetID='tracelog' inputName='log' if='inposterior(estimatedFreqs.$(n)) and freqParameter.$(n)/estimate=true'/>
        </subtemplate>

        <subtemplate id='Empirical' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.Frequencies' mainid='empiricalFreqs.$(n)'>
<![CDATA[
            <frequencies id='empiricalFreqs.$(n)' spec='Frequencies' data='@$(n)' estimate='true'/>
]]>
        </subtemplate>

        <subtemplate id='AllEqual' spec='BeautiSubTemplate' class='beast.evolution.substitutionmodel.Frequencies' mainid='equalFreqs.$(n)'>
<![CDATA[
            <frequencies id='equalFreqs.$(n)' spec='Frequencies' data='@$(n)' estimate='false'/>
]]>
        </subtemplate>


<!-- Clock models -->

<!-- Strickt clock -->
        <subtemplate id='StrictClock' spec='BeautiSubTemplate' class='beast.evolution.branchratemodel.StrictClockModel' mainid='StrictClock.$(n)'>
<![CDATA[
                <branchRateModel spec='StrictClockModel' id='StrictClock.$(n)'>
                    <clock.rate id='clockRate.$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>

				<operator id='StrictClockRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.$(n)'/>
   			    <!-- need updown operator for clockRate?!? Also in Standard.xml -->

		        <plugin id='ClockPrior.$(n)' spec='Prior' x='@clockRate.$(n)'><distr spec="OneOnX"/></plugin>
]]>
            <connect spec='BeautiConnector' srcID='clockRate.$(n)' targetID='state' inputName='stateNode' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='clockRate.$(n)'  targetID='state' inputName='stateNode'          if='inposterior(StrictClock.$(n) and clockRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='ClockPrior.$(n)' targetID='prior' inputName='distribution'       if='inposterior(StrictClock.$(n) and clockRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='StrictClockRateScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(StrictClock.$(n) and clockRate.$(n)/estimate=true'/>
        </subtemplate>

<!-- Relaxed clock exponential -->
        <subtemplate id='RelaxedClockExponential' spec='BeautiSubTemplate' class='beast.evolution.branchratemodel.UCRelaxedClockModel' mainid='ExponentialRelaxedClock.$(n)'>
<![CDATA[
        <plugin spec='UCRelaxedClockModel' id="ExponentialRelaxedClock.$(n)" tree='@Tree.$(n)'>
			<parameter name='clock.rate' id='ucedMean.$(n)' value='1.0' estimate='false'/>
            <distr id='Exponential.$(n)' name='distr' spec="beast.math.distributions.Exponential">
				<parameter id='UCExpLambda' name='lambda' value='1.0'/>
			</distr>
            <rateCategories spec='parameter.IntegerParameter' id='expRateCategories.$(n)' value="1" dimension='10' estimate='true'/>
        </plugin>

        <operator id='ucedMeanScaler.$(n)' spec='ScaleOperator' scaleAll='false' scaleFactor="0.5" weight="1" parameter="@ucedMean.$(n)"/>
        <operator id="ExpCategoriesRandomWalk.$(n)" spec="IntRandomWalkOperator" windowSize='1' weight="10" parameter="@expRateCategories.$(n)"/>
		<operator id='ExpCategoriesSwapOperator.$(n)' spec='SwapOperator' howMany="1" weight="10" intparameter='@expRateCategories.$(n)'/>
		<operator id='ExpCategoriesUniform.$(n)' spec='UniformOperator' weight="10" intparameter='@expRateCategories.$(n)'/>

		<upDownOperator id='relaxedUpDownOperatorExp.$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="3">
			<up idref="ucedMean.$(n)"/>
			<down idref="Tree.$(n)"/>
		</upDownOperator>

		<log id='rateStat.$(n)' spec='RateStatistic' tree='@Tree.$(n)' branchratemodel='@ExponentialRelaxedClock.$(n)'/>
        <plugin id='UCMeanRatePrior.$(n)' spec='Prior' x='@ucedMean.$(n)'><distr spec="OneOnX"/></plugin>
]]>
            <connect spec='BeautiConnector' srcID='ucedMean.$(n)' targetID='state' inputName='stateNode' if='inposterior(ExponentialRelaxedClock.$(n)) and ucedMean.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='expRateCategories.$(n)' targetID='state' inputName='stateNode' if='inposterior(ExponentialRelaxedClock.$(n))'/>

            <connect spec='BeautiConnector' srcID='UCMeanRatePrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(ExponentialRelaxedClock.$(n)) and ucedMean.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='ucedMeanScaler.$(n)'            targetID='mcmc' inputName='operator' if='inposterior(ExponentialRelaxedClock.$(n)) and ucedMean.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='ExpCategoriesRandomWalk.$(n)'   targetID='mcmc' inputName='operator' if='inposterior(ExponentialRelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='ExpCategoriesSwapOperator.$(n)' targetID='mcmc' inputName='operator' if='inposterior(ExponentialRelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='ExpCategoriesUniform.$(n)'      targetID='mcmc' inputName='operator' if='inposterior(ExponentialRelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='relaxedUpDownOperatorExp.$(n)'  targetID='mcmc' inputName='operator' if='inposterior(ExponentialRelaxedClock.$(n)) and ucedMean.$(n)/estimate=true and Tree.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='ucedMean.$(n)' targetID='tracelog' inputName='log' if='inposterior(ExponentialRelaxedClock.$(n)) and ucedMean.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateStat.$(n)' targetID='tracelog' inputName='log' if='inposterior(ExponentialRelaxedClock.$(n))'/>

        </subtemplate>


<!-- Relaxed clock log normal -->
        <subtemplate id='RelaxedClockLogNormal' spec='BeautiSubTemplate' class='beast.evolution.branchratemodel.UCRelaxedClockModel' mainid='RelaxedClock.$(n)'>
<![CDATA[
        <plugin spec='UCRelaxedClockModel' id="RelaxedClock.$(n)" tree='@Tree.$(n)'>
			<parameter name='clock.rate' id='ucldMean.$(n)' value='1.0'/>
            <distr id='LogNormalDistributionModel.$(n)' name='distr' spec="beast.math.distributions.LogNormalDistributionModel" meanInRealSpace='true'>
                <parameter name='M' value="1.0" estimate='false' lower='0' upper='1'/>
                <parameter name='S' id='ucldStdev.$(n)' value="0.5" lower="0" upper="5" estimate='true'/>
            </distr>
            <rateCategories spec='parameter.IntegerParameter' id='rateCategories.$(n)' value="1" dimension='10' estimate='true'/>
        </plugin>

        <operator id='ucldMeanScaler.$(n)' spec='ScaleOperator' scaleAll='false' scaleFactor="0.5" weight="1" parameter="@ucldMean.$(n)"/>
        <operator id='ucldStdevScaler.$(n)' spec='ScaleOperator' scaleAll='false' scaleFactor="0.5" weight="1" parameter="@ucldStdev.$(n)"/>
        <operator id="CategoriesRandomWalk.$(n)" spec="IntRandomWalkOperator" windowSize='1' weight="10" parameter="@rateCategories.$(n)"/>
		<operator id='CategoriesSwapOperator.$(n)' spec='SwapOperator' howMany="1" weight="10" intparameter='@rateCategories.$(n)'/>
		<operator id='CategoriesUniform.$(n)' spec='UniformOperator' weight="10" intparameter='@rateCategories.$(n)'/>

		<upDownOperator id='relaxedUpDownOperator.$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="3">
			<up idref="ucldMean.$(n)"/>
			<down idref="Tree.$(n)"/>
		</upDownOperator>

        <prior id='ucldStdevPrior.$(n)' spec='Prior' x='@ucldStdev.$(n)'>
            <distr spec="beast.math.distributions.Exponential">
                <parameter name='lambda' value="0.3333" estimate='false'/>
            </distr>
        </prior>


		<log id='rate.$(n)' spec='RateStatistic' tree='@Tree.$(n)' branchratemodel='@RelaxedClock.$(n)'/>
        <plugin id='MeanRatePrior.$(n)' spec='Prior' x='@ucldMean.$(n)'><distr spec="OneOnX"/></plugin>
]]>
            <connect spec='BeautiConnector' srcID='ucldMean.$(n)' targetID='state' inputName='stateNode' if='inposterior(RelaxedClock.$(n)) and ucldMean.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='ucldStdev.$(n)' targetID='state' inputName='stateNode' if='inposterior(RelaxedClock.$(n)) and ucldStdev.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='rateCategories.$(n)' targetID='state' inputName='stateNode' if='inposterior(RelaxedClock.$(n))'/>

            <connect spec='BeautiConnector' srcID='ucldMeanScaler.$(n)'         targetID='mcmc' inputName='operator' if='inposterior(RelaxedClock.$(n)) and ucldMean.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='ucldStdevScaler.$(n)'        targetID='mcmc' inputName='operator' if='inposterior(RelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='CategoriesRandomWalk.$(n)'   targetID='mcmc' inputName='operator' if='inposterior(RelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='CategoriesSwapOperator.$(n)' targetID='mcmc' inputName='operator' if='inposterior(RelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='CategoriesUniform.$(n)'      targetID='mcmc' inputName='operator' if='inposterior(RelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='relaxedUpDownOperator.$(n)'  targetID='mcmc' inputName='operator' if='inposterior(RelaxedClock.$(n)) and ucldMean.$(n)/estimate=true and Tree.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='ucldMean.$(n)'  targetID='tracelog' inputName='log' if='inposterior(RelaxedClock.$(n)) and ucldMean.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='ucldStdev.$(n)' targetID='tracelog' inputName='log' if='inposterior(RelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='rate.$(n)'      targetID='tracelog' inputName='log' if='inposterior(RelaxedClock.$(n))'/>

            <connect spec='BeautiConnector' srcID='ucldStdevPrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(RelaxedClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='MeanRatePrior.$(n)'  targetID='prior' inputName='distribution' if='inposterior(RelaxedClock.$(n)) and ucldMean.$(n)/estimate=true'/>
        </subtemplate>


<!-- Random local clock -->
        <subtemplate id='RandomLocalClock' spec='BeautiSubTemplate' class='beast.evolution.branchratemodel.RandomLocalClockModel' mainid='RandomLocalClock.$(n)'>
<![CDATA[
        <input spec='RandomLocalClockModel' id="RandomLocalClock.$(n)" ratesAreMultipliers="false" tree='@Tree.$(n)'>
            <clock.rate id='meanClockRate.$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
            <parameter spec='parameter.BooleanParameter' name='indicators' id='Indicators.$(n)' value="1"/>
            <parameter name='rates' id='clockrates.$(n)' value="1"/>
        </input>

        <operator id="IndicatorsBitFlip.$(n)" spec="BitFlipOperator" weight="1" parameter="@Indicators.$(n)"/>
<!-- this should probably be a DeltaExchange instead of scale operator to keep mean rate to 1 -->
        <operator id='ClockRateScaler.$(n)' spec='ScaleOperator' scaleAll='false' scaleFactor="0.5" weight="1" parameter="@clockrates.$(n)"/>

        <operator id='randomClockScaler.$(n)' spec='ScaleOperator' scaleAll='false' scaleFactor="0.5" weight="1" parameter="@meanClockRate.$(n)"/>
		<upDownOperator id='randomClockUpDownOperator.$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="3">
			<up idref="meanClockRate.$(n)"/>
			<down idref="Tree.$(n)"/>
		</upDownOperator>

        <plugin id='MeanRRatePrior.$(n)' spec='Prior' x='@meanClockRate.$(n)'><distr spec="OneOnX"/></plugin>
]]>
            <connect spec='BeautiConnector' srcID='Indicators.$(n)' targetID='state' inputName='stateNode' if='inposterior(Indicators.$(n))'/>
            <connect spec='BeautiConnector' srcID='meanClockRate.$(n)' targetID='state' inputName='stateNode' if='inposterior(meanClockRate.$(n)) and meanClockRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='clockrates.$(n)' targetID='state' inputName='stateNode' if='inposterior(clockrates.$(n))'/>


            <connect spec='BeautiConnector' srcID='randomClockScaler.$(n)'         targetID='mcmc' inputName='operator' if='inposterior(RandomLocalClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='randomClockUpDownOperator.$(n)' targetID='mcmc' inputName='operator' if='inposterior(RandomLocalClock.$(n)) and meanClockRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='IndicatorsBitFlip.$(n)'         targetID='mcmc' inputName='operator' if='inposterior(RandomLocalClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='ClockRateScaler.$(n)'           targetID='mcmc' inputName='operator' if='inposterior(RandomLocalClock.$(n))'/>

            <connect spec='BeautiConnector' srcID='Indicators.$(n)'                targetID='tracelog' inputName='log' if='inposterior(RandomLocalClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='clockrates.$(n)'                targetID='tracelog' inputName='log' if='inposterior(RandomLocalClock.$(n))'/>
            <connect spec='BeautiConnector' srcID='meanClockRate.$(n)'             targetID='tracelog' inputName='log' if='inposterior(RandomLocalClock.$(n)) and meanClockRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='MeanRRatePrior.$(n)'            targetID='prior' inputName='distribution' if='inposterior(RandomLocalClock.$(n)) and meanClockRate.$(n)/estimate=true'/>
        </subtemplate>


<!-- tree priors -->
<!-- Yule -->
        <subtemplate id='YuleModel' spec='BeautiSubTemplate' class='beast.evolution.speciation.YuleModel' mainid='YuleModel.$(n)'>
<![CDATA[
            <plugin spec='YuleModel' id="YuleModel.$(n)" tree='@Tree.$(n)'>
                <parameter name='birthDiffRate' id="birthRate.$(n)" value='1.0'/>
            </plugin>

            <prior id='YuleBirthRatePrior.$(n)' spec='Prior' x='@birthRate.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1000'/></prior>

  		    <scale id='YuleBirthRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate.$(n)"/>
]]>
            <!--connect spec='BeautiConnector' srcID='YuleModel.$(n)' targetID='prior' inputName='distribution'/-->
            <connect spec='BeautiConnector' srcID='birthRate.$(n)' targetID='state' inputName='stateNode' if='inposterior(YuleModel.$(n)) and birthRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='YuleBirthRatePrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(YuleModel.$(n)) and birthRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='YuleBirthRateScaler.$(n)' targetID='mcmc' inputName='operator'     if='inposterior(YuleModel.$(n)) and birthRate.$(n)/estimate=true'/>
        </subtemplate>


<!-- Birth Death model according to Gernhard'08 -->
        <subtemplate id='BirthDeathModel' spec='BeautiSubTemplate' class='beast.evolution.speciation.BirthDeathGernhard08Model' mainid='BirthDeath.$(n)'>
<![CDATA[
            <distribution id="BirthDeath.$(n)" spec="speciation.BirthDeathGernhard08Model" tree='@Tree.$(n)'>
                <birthDiffRate spec='parameter.RealParameter' id="birthRate2.$(n)" value='1' lower='0' upper='10000' />
            	<relativeDeathRate spec='parameter.RealParameter' id="relativeDeathRate2.$(n)" value='0.5' lower='0' upper='1' />
            </distribution>

            <prior id='BirthRatePrior.$(n)' spec='Prior' x='@birthRate2.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1000'/></prior>
            <prior id='DeathRatePrior.$(n)' spec='Prior' x='@relativeDeathRate2.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/></prior>

  		    <scale id='BirthRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate2.$(n)"/>
  		    <scale id='DeathRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@relativeDeathRate2.$(n)"/>
]]>
            <!--connect spec='BeautiConnector' srcID='BirthDeath.$(n)' targetID='prior' inputName='distribution'/-->
            <connect spec='BeautiConnector' srcID='birthRate2.$(n)' targetID='state' inputName='stateNode' if='inposterior(BirthDeath.$(n)) and birthRate2.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='relativeDeathRate2.$(n)' targetID='state' inputName='stateNode' if='inposterior(BirthDeath.$(n)) and relativeDeathRate2.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='BirthRatePrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeath.$(n)) and birthRate2.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='DeathRatePrior.$(n)' targetID='prior' inputName='distribution' if='inposterior(BirthDeath.$(n)) and relativeDeathRate2.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='BirthRateScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(BirthDeath.$(n)) and birthRate2.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='DeathRateScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(BirthDeath.$(n)) and relativeDeathRate2.$(n)/estimate=true'/>
        </subtemplate>



<!-- Coalescent for Constant population -->
        <subtemplate id='CoalescentConstantPopulation' spec='BeautiSubTemplate' class='beast.evolution.tree.coalescent.Coalescent' mainid='CoalescentConstant.$(n)'>
<![CDATA[
            <distribution id="CoalescentConstant.$(n)" spec="Coalescent">
                <treeIntervals spec='TreeIntervals' id='TreeIntervals.$(n)' tree='@Tree.$(n)'/>
                <populationModel spec="ConstantPopulation" id='ConstantPopulation.$(n)'>
                     <parameter name="popSize" id="cPopSize.$(n)" value='1.0' estimate='false'/>
                 </populationModel>
            </distribution>
]]>
        </subtemplate>


<!-- Coalescent for Exponential population -->
        <subtemplate id='CoalescentExponentialPopulation' spec='BeautiSubTemplate' class='beast.evolution.tree.coalescent.Coalescent' mainid='CoalescentExponential.$(n)'>
<![CDATA[
            <distribution id="CoalescentExponential.$(n)" spec="Coalescent">
                <treeIntervals spec='TreeIntervals' id='TreeIntervals.$(n)' tree='@Tree.$(n)'/>
                <populationModel spec="ExponentialGrowth" id="ExponentialGrowth.$(n)">
                    <parameter name="popSize" id="ePopSize.$(n)" value='1.0' estimate='false'/>
                    <parameter name="growthRate" id="growthRate.$(n)" value='1.0' estimate='false'/>
                </populationModel>
            </distribution>
]]>
        </subtemplate>


<!-- Coalescent for Bayesian skyline -->
        <subtemplate id='CoalescentBayesianSkyline' spec='BeautiSubTemplate' class='beast.evolution.tree.coalescent.Coalescent' mainid='BayesianSkyline.$(n)'>
<![CDATA[
            <distribution spec="BayesianSkyline" id='BayesianSkyline.$(n)'>
                <parameter name='popSizes' id='bPopSizes.$(n)' dimension="5" value="380.0" lower="0.0" upper="380000.0" estimate='true'/>
                <groupSizes spec='parameter.IntegerParameter' id='bGroupSizes.$(n)' dimension='5' value='1' estimate='true'/>
                <treeIntervals spec='TreeIntervals' id='BSPTreeIntervals.$(n)' tree='@Tree.$(n)'/>
            </distribution>

            <distribution id='MarkovChainedPopSizes.$(n)' spec="beast.math.distributions.MarkovChainDistribution" 
				jeffreys="true"
				parameter="@bPopSizes.$(n)"/>

		    <operator id='popSizesScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="15" parameter="@bPopSizes.$(n)"/>
		    <operator id='groupSizesDelta.$(n)' spec='DeltaExchangeOperator' delta="1" weight="6" integer="true"
		              intparameter="@bGroupSizes.$(n)"/>

]]>
            <!--connect spec='BeautiConnector' srcID='BayesianSkyline.$(n)' targetID='prior' inputName='distribution'/-->
            <connect spec='BeautiConnector' srcID='bPopSizes.$(n)' targetID='state' inputName='stateNode' if='inposterior(bPopSizes.$(n))'/>
            <connect spec='BeautiConnector' srcID='bGroupSizes.$(n)' targetID='state' inputName='stateNode' if='inposterior(bGroupSizes.$(n))'/>

            <connect spec='BeautiConnector' srcID='MarkovChainedPopSizes.$(n)' targetID='prior' inputName='distribution' if='inposterior(BayesianSkyline.$(n))'/>

            <connect spec='BeautiConnector' srcID='BayesianSkyline.$(n)' targetID='tracelog' inputName='log' if='inposterior(BayesianSkyline.$(n))'/>
            <connect spec='BeautiConnector' srcID='bPopSizes.$(n)'       targetID='tracelog' inputName='log' if='inposterior(BayesianSkyline.$(n))'/>
            <connect spec='BeautiConnector' srcID='bGroupSizes.$(n)'     targetID='tracelog' inputName='log' if='inposterior(BayesianSkyline.$(n))'/>

            <connect spec='BeautiConnector' srcID='popSizesScaler.$(n)'  targetID='mcmc' inputName='operator' if='inposterior(BayesianSkyline.$(n))'/>
            <connect spec='BeautiConnector' srcID='groupSizesDelta.$(n)' targetID='mcmc' inputName='operator' if='inposterior(BayesianSkyline.$(n))'/>
        </subtemplate>

<!-- Parametric distributions, all without hyperpriors -->

<!-- Uniform -->
        <subtemplate id='Uniform' spec='BeautiSubTemplate' class='beast.math.distributions.Uniform' mainid='[top]'>
<![CDATA[
        <distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/>
]]>
        </subtemplate>

<!-- Normal -->
        <subtemplate id='Normal' spec='BeautiSubTemplate' class='beast.math.distributions.Normal' mainid='[top]'>
<![CDATA[
    <distr offset="0.0" spec="beast.math.distributions.Normal">
        <parameter name='mean' value='0' estimate='false'/>
        <parameter name='sigma' value='1' estimate='false'/>
    </distr>
]]>
        </subtemplate>

<!-- OneOnX -->
        <subtemplate id='1/X' spec='BeautiSubTemplate' class='beast.math.distributions.OneOnX' mainid='[top]'>
<![CDATA[
        <distr spec="beast.math.distributions.OneOnX"/>
]]>
        </subtemplate>

<!-- lognormal -->
        <subtemplate id='LogNormal' spec='BeautiSubTemplate' class='beast.math.distributions.LogNormalDistributionModel' mainid='[top]'>
<![CDATA[
        <distr name='distr' spec="beast.math.distributions.LogNormalDistributionModel">
            <parameter name='M' value="1" estimate='false'/>
            <parameter name='S' value="1.25" lower="0" upper="5" estimate='false'/>
        </distr>
]]>
        </subtemplate>

<!-- Exponential -->
        <subtemplate id='Exponential' spec='BeautiSubTemplate' class='beast.math.distributions.Exponential' mainid='[top]'>
<![CDATA[
        <distr offset="0.0" spec="beast.math.distributions.Exponential">
            <parameter name='lambda' value="1" estimate='false'/>
        </distr>
]]>
        </subtemplate>

<!-- Gamma -->
        <subtemplate id='Gamma' spec='BeautiSubTemplate' class='beast.math.distributions.Gamma' mainid='[top]'>
<![CDATA[
        <distr offset="0.0" spec="beast.math.distributions.Gamma">
            <parameter name='alpha' value="2" estimate='false'/>
            <parameter name='beta' value="2" estimate='false'/>
        </distr>
]]>
        </subtemplate>

<!-- Laplace -->
<!-- TODO: IMPLEMENT beast.math.distributions.LaplaceDistribution.getDistribution() before uncommenting this
        <subtemplate id='LaplaceDistribution' spec='BeautiSubTemplate' class='beast.math.distributions.LaplaceDistribution' mainid='[top]'>
<![CDATA[
        <distr offset="0.0" spec="beast.math.distributions.LaplaceDistribution">
            <parameter name='mu' value="0" estimate='false'/>
            <parameter name='scale' value="1" estimate='false'/>
        </distr>
]]>
        </subtemplate>
-->

<!-- InverseGamma -->
        <subtemplate id='InverseGamma' spec='BeautiSubTemplate' class='beast.math.distributions.InverseGamma' mainid='[top]'>
<![CDATA[
        <distr offset="0.0" spec="beast.math.distributions.InverseGamma">
            <parameter name='alpha' value="2" estimate='false'/>
            <parameter name='beta' value="2" estimate='false'/>
        </distr>
]]>
        </subtemplate>

</mergewith>



<!-- Tree initialisation -->
<!-- Random tree -->

        <subtemplate id='RandomTree' spec='BeautiSubTemplate' class='beast.evolution.tree.RandomTree' mainid='RandomTree.$(n)'>
<![CDATA[
            <tree spec='beast.evolution.tree.RandomTree' id='RandomTree.$(n)' estimate='false' trait='@datetrait.$(n)'>
                <taxa spec='Alignment' idref='data'/>
                <populationModel id='ConstantPopulation.$(n)' spec='ConstantPopulation'>
            		<popSize id='popSize.$(n)' spec='parameter.RealParameter' value='1'/>
	            </populationModel>
            </tree>
]]>
        </subtemplate>

<!-- Cluster tree (for UPGMA) -->

        <subtemplate id='UPGMATree' spec='BeautiSubTemplate' class='beast.util.ClusterTree' mainid='UPGMATree.$(n)'>
<![CDATA[
        <tree spec='beast.util.ClusterTree' id='UPGMATree.$(n)' clusterType='upgma' estimate='false'  trait='@datetrait.$(n)' taxa='@$(n)'/>
]]>
        </subtemplate>

<!-- Newick tree -->
        <subtemplate id='NewickTree' spec='BeautiSubTemplate' class='beast.util.ClusterTree' mainid='NewickTree.$(n)'>
<![CDATA[
        <tree spec='beast.util.TreeParser' id='NewickTree.$(n)' estimate='false'  trait='@datetrait.$(n)'  taxa='@$(n)' newick=""/>
]]>
        </subtemplate>

</beast>
