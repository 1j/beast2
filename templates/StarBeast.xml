<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

    <beauticonfig spec='BeautiConfig'
        inputLabelMap='beast.core.MCMC.operator=Operators,
	        beast.core.MCMC.logger=Loggers'
        inlinePlugins ='beast.core.MCMC.distribution,
            beast.evolution.sitemodel.SiteModel.substModel,
            beast.evolution.tree.coalescent.ExponentialGrowth,
            beast.evolution.tree.coalescent.ConstantPopulation,
            beast.evolution.tree.coalescent.Coalescent,
            beast.core.State.stateNode'
        collapsedPlugins ='beast.core.MCMC.logger'
        suppressPlugins = 'beast.core.MCMC.operator,
	        beast.evolution.tree.coalescent.Coalescent.treeIntervals,
	        beast.evolution.tree.coalescent.Coalescent.tree,
	        beast.core.MCMC.state,
	        beast.core.MCMC.distribution,
	        beast.core.MCMC.init,
	        beast.evolution.speciation.BirthDeathGernhard08Model.relativeDeathRate,
	        beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
	        beast.evolution.speciation.BirthDeathGernhard08Model.type,
	        beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
	        beast.evolution.speciation.BirthDeathGernhard08Model.tree,
	        beast.evolution.tree.Tree,
	        beast.evolution.tree.Tree.trait,
	        beast.evolution.tree.Tree.taxa,
	        beast.evolution.tree.Tree.taxonset,
	        beast.evolution.tree.RandomTree.trait,
	        beast.evolution.tree.RandomTree.initial,
	        beast.evolution.tree.RandomTree.taxa,
	        beast.evolution.tree.RandomTree.taxonset,
	        beast.evolution.tree.RandomTree.estimate,
	        beast.util.TreeParser.initial,
	        beast.util.TreeParser.taxa,
	        beast.util.TreeParser.taxonset,
	        beast.util.TreeParser.trait,
	        beast.util.TreeParser.estimate,
	        beast.util.ClusterTree.initial,
	        beast.util.ClusterTree.taxa,
	        beast.util.ClusterTree.taxonset,
	        beast.util.ClusterTree.trait,
	        beast.util.ClusterTree.estimate,
	        beast.evolution.substitutionmodel.WAG.rates,
	        beast.evolution.substitutionmodel.WAG.frequencies,
	        beast.evolution.substitutionmodel.JTT.rates,
	        beast.evolution.substitutionmodel.JTT.frequencies,
	        beast.evolution.substitutionmodel.Blosum62.rates,
	        beast.evolution.substitutionmodel.Blosum62.frequencies,
	        beast.evolution.substitutionmodel.Dayhoff.rates,
	        beast.evolution.substitutionmodel.Dayhoff.frequencies,
	        beast.evolution.substitutionmodel.CPREV.rates,
	        beast.evolution.substitutionmodel.CPREV.frequencies,
	        beast.evolution.substitutionmodel.MTREV.rates,
	        beast.evolution.substitutionmodel.MTREV.frequencies,
	        beast.evolution.substitutionmodel.GTR.rates,
	        beast.evolution.substitutionmodel.JukesCantor.frequencies,
            beast.math.distributions.Prior.x,
            beast.math.distributions.MRCAPrior.tree,
            beast.math.distributions.MRCAPrior.monophyletic,
            beast.math.distributions.MRCAPrior.taxonset,
            beast.evolution.branchratemodel.UCRelaxedClockModel.tree,
            beast.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
            beast.evolution.branchratemodel.RandomLocalClockModel.tree,
            beast.evolution.branchratemodel.RandomLocalClockModel.meanRate,
            beast.evolution.branchratemodel.RandomLocalClockModel.indicators,
            beast.evolution.operators.ScaleOperator.indicator,
	        beast.core.Operator.weight,
            beast.core.Logger.model
            '
        buttonLabelMap='beast.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters'
    >


        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png' forceExpansion='FALSE'
            type='beast.evolution.alignment.Alignment'
        />
		<panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png' forceExpansion='TRUE'
        />
		<panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png' forceExpansion='TRUE'
        />
		<panel spec='BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="none" icon='6.png' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'
        />
		<panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png' forceExpansion='TRUE'
        />


        <partitiontemplate id='xxx' spec='BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[

		    <distribution id='treePrior.$(n)' spec='GeneTreeForSpeciesTreeDistribution' tree='@Tree.$(n)' speciesTree='@speciesTree' speciesTreePrior='@SpeciesTreePopSize.Prior'/>

            <!-- site model                                                              -->
            <plugin spec='SiteModel' id="SiteModel.$(n)" gammaCategoryCount='0'>
                <substModel spec='JukesCantor' id='JC69.$(n)'/>
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.$(n)' value='0.0' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.$(n)' value='1.0'         estimate='false'/>
            </plugin>

            <plugin spec='TreeLikelihood' id="treeLikelihood.$(n)">
                <data idref="data"/>
                <tree idref="Tree.$(n)"/>
                <siteModel idref="SiteModel.$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.$(n)'>
                    <clock.rate id='clockRate.$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

	        <plugin id='ClockPrior.$(n)' spec='Prior' x='@clockRate.$(n)'><distr spec="OneOnX"/></plugin>

            <!-- tree and its properties -->
            <taxonset id='TaxonSet.$(n)' spec='beast.evolution.alignment.TaxonSet' alignment='@$(n)' />
            <plugin spec='beast.evolution.tree.Tree' id='Tree.$(n)' taxonset='@TaxonSet.$(n)'>
	            <!--trait id='datetrait.$(n)' spec='beast.evolution.tree.TraitSet' traitname='date' units='year'
		            value=''>
		            <taxa idref='data'/>
	            </trait-->
            </plugin>

            <!--plugin spec='beast.evolution.tree.RandomTree' id='RandomTree.$(n)' estimate='false' trait='@datetrait.$(n)' initial='@Tree.$(n)'-->
			<tree spec='RandomGeneTree' id='RandomGeneTree.$(n)' initial='@Tree.$(n)' speciesTree='@speciesTree' taxa='@$(n)'>
				<populationModel id='RGTPopulationModel.$(n)' spec='ConstantPopulation'><popSize id='RGTPopSize.$(n)' spec='parameter.RealParameter' value='1'/></populationModel>
			</tree>

            <!-- default tree prior -->
            <plugin spec='YuleModel' id="YuleModel.$(n)" tree='@Tree.$(n)'>
                <parameter name='birthDiffRate' id="birthRate.$(n)" value='1.0' estimate='true'/>
            </plugin>

            <plugin id='TreeHeight.$(n)' spec='beast.evolution.tree.TreeHeightLogger' tree='@Tree.$(n)'/>

            <logger id='treelog.$(n)' spec='beast.core.Logger' logEvery="10000" fileName="beast.$(seed).trees" mode='tree'>
                <log idref="Tree.$(n)"/>
            </logger>

            <operator id='proportionInvariantScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@proportionInvariant.$(n)"/>
            <operator id='mutationRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@mutationRate.$(n)"/>
            <operator id='gammaShapeScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@gammaShape.$(n)"/>

            <operator id='treeScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" tree="@Tree.$(n)"/>
            <operator id='UniformOperator.$(n)' spec='Uniform' weight="10" tree="@Tree.$(n)"/>
            <operator id='SubtreeSlide.$(n)' spec='SubtreeSlide' weight="5" gaussian="true" size="1.0" tree="@Tree.$(n)"/>
            <operator id='narrow.$(n)' spec='Exchange' isNarrow='true' weight="1" tree="@Tree.$(n)"/>
            <operator id='wide.$(n)' spec='Exchange' isNarrow='false' weight="1" tree="@Tree.$(n)"/>
            <operator id='WilsonBalding.$(n)' spec='WilsonBalding' weight="1" tree="@Tree.$(n)"/>

            <prior id='YuleBirthRatePrior.$(n)' spec='Prior' x='@birthRate.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' /></prior>
            <prior id='GammaShapePrior.$(n)' spec='Prior' x='@gammaShape.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1000'/></prior>
  		    <operator id='YuleBirthRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate.$(n)"/>
			<operator id='StrictClockRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.$(n)'/>
			<!-- need updown operator for clockRate?!? Also in SubstModel.xml -->




]]>
            <connect spec='BeautiConnector' srcID='YuleModel.$(n)'            targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect spec='BeautiConnector' srcID='treeLikelihood.$(n)'       targetID='likelihood' inputName='distribution' if="isInitializing"/>

            <connect spec='BeautiConnector' srcID='treelog.$(n)'              targetID='mcmc' inputName='logger' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='RandomGeneTree.$(n)'       targetID='mcmc' inputName='init' if='inposterior(Tree.$(n))'/>

            <connect spec='BeautiConnector' srcID='treePrior.$(n)'            targetID='prior' inputName='distribution' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='ClockPrior.$(n)'           targetID='prior' inputName='distribution' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='Tree.$(n)'                 targetID='state' inputName='stateNode' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='proportionInvariant.$(n)'  targetID='state' inputName='stateNode' if='inposterior(proportionInvariant.$(n)) and proportionInvariant.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='mutationRate.$(n)'         targetID='state' inputName='stateNode' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='gammaShape.$(n)'           targetID='state' inputName='stateNode' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='clockRate.$(n)'            targetID='state' inputName='stateNode' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='proportionInvariantScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(proportionInvariant.$(n)) and proportionInvariant.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='mutationRateScaler.$(n)'        targetID='mcmc' inputName='operator' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='gammaShapeScaler.$(n)'          targetID='mcmc' inputName='operator' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='YuleBirthRateScaler.$(n)'       targetID='mcmc' inputName='operator' if='inposterior(birthRate.$(n)) and birthRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='StrictClockRateScaler.$(n)'     targetID='mcmc' inputName='operator' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='treeScaler.$(n)'                targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='UniformOperator.$(n)'           targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='SubtreeSlide.$(n)'              targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='narrow.$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='wide.$(n)'                      targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='WilsonBalding.$(n)'             targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n))'/>

            <connect spec='BeautiConnector' srcID='TreeHeight.$(n)'           targetID='tracelog' inputName='log' if='inposterior(Tree.$(n))'/>
            <connect spec='BeautiConnector' srcID='proportionInvariant.$(n)'  targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.$(n)) and proportionInvariant.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='mutationRate.$(n)'         targetID='tracelog' inputName='log' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='gammaShape.$(n)'           targetID='tracelog' inputName='log' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='clockRate.$(n)'            targetID='tracelog' inputName='log' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='GammaShapePrior.$(n)'      targetID='prior' inputName='distribution' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect spec='BeautiConnector' srcID='YuleBirthRatePrior.$(n)'   targetID='prior' inputName='distribution' if='inposterior(birthRate.$(n)) and birthRate.$(n)/estimate=true'/>

            <connect spec='BeautiConnector' srcID='Tree.$(n)'        targetID='Reheight' inputName='tree'/>
            <connect spec='BeautiConnector' srcID='popSizeTopScaler' targetID='Reheight' inputName='tree' if='SpeciesTreePopSize.Prior/popFunction!=constant'/>
            <connect spec='BeautiConnector' srcID='Tree.$(n)'        targetID='treeTopFinder' inputName='tree'/>
            <connect spec='BeautiConnector' srcID='treeTopFinder'    targetID='treePrior.$(n)' inputName='treetop' if='SpeciesTreePopSize.Prior/popFunction=linear'/>
        </partitiontemplate>

        <mergepoint id='commonTemplates'/>

    </beauticonfig>


	<taxonset spec='beast.evolution.alignment.TaxonSet' id='taxonsuperset'>
		<taxon spec='beast.evolution.alignment.TaxonSet' id='dummyTaxonSet'>
			<taxon spec='beast.evolution.alignment.Taxon' id='dummyTaxon'/>
		</taxon>
	</taxonset>

	<tree spec='beast.evolution.tree.Tree' id='speciesTree' taxonset='@taxonsuperset'/>

	<treetop spec='TreeTopFinder' id='treeTopFinder'/>

<!-- framework for main model -->
    <run spec="MCMC" id="mcmc" chainLength="10000000">

        <state storeEvery='100000' id='state'>
	        <stateNode idref='popSize'/> 
	        <stateNode idref='popSizeTop'/> 
	        <stateNode idref='speciesTree'/> 
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior">
			    <!-- species tree priors -->
			    <distribution id='SpeciesTreePopSize.Prior' spec='SpeciesTreePrior' tree='@speciesTree' 
			    		popFunction='constant' taxonset='@taxonsuperset'>
			        <bottomPopSize spec='parameter.RealParameter' id='popSize' value='1'/> 
		            <topPopSize spec='parameter.RealParameter' id='popSizeTop' value='1'/> 
			        <parameter name='gammaParameter' id='popMean' value='0.004'/>
			    </distribution>
		        <distribution id="SpeciesTreeDivergenceTimes.Prior" spec="speciation.YuleModel" tree='@speciesTree'>
		            <birthDiffRate spec='parameter.RealParameter' id="birthRate" value='213.2021' lower='0' upper='10000' />
		        </distribution>
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood">
            </distribution>
        </distribution>

		<operator id="Reheight" spec="NodeReheight" tree="@speciesTree" weight="94" taxonset='@taxonsuperset'/>
	    <operator degreesOfFreedom="1" id="popSizeScaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.5" spec="ScaleOperator" parameter="@popSize" weight="5.0"/>
	    <operator degreesOfFreedom="1" id="popSizeTopScaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.5" spec="ScaleOperator" parameter="@popSizeTop" weight="5.0"/>

        <logger id='tracelog' logEvery="10000" fileName="beast_$(seed).log">
	        <model idref='posterior'/>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

		<logger fileName="species_$(seed).trees" id="speciesTreeLogger" logEvery="10000" mode="tree">
		    <log spec='SpeciesTreeLogger' popSize='@popSize' popSizeTop="@popSizeTop" tree="@speciesTree" speciesTreePrior='@SpeciesTreePopSize.Prior'/>
		</logger>

        <logger id='screenlog' logEvery="10000">
	        <model idref='posterior'/>
            <log idref="posterior"/>
      	    <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>


<!--        
<beast version='2.0'
       namespace='beast.evolution.alignment:beast.evolution.tree:beast.math:beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

    <beauticonfig spec='beast.app.beauti.BeautiConfig'
        inputLabelMap='beast.core.MCMC.operator=Operators,
	        beast.core.MCMC.logger=Loggers'
        inlinePlugins ='beast.core.MCMC.distribution,
            beast.evolution.sitemodel.SiteModel.substModel,
            beast.evolution.tree.coalescent.ExponentialGrowth,
            beast.evolution.tree.coalescent.ConstantPopulation,
            beast.evolution.tree.coalescent.Coalescent,
            beast.core.State.stateNode'
        collapsedPlugins ='beast.core.MCMC.logger'
        suppressPlugins = 'beast.core.MCMC.operator,
	        beast.evolution.tree.coalescent.Coalescent.treeIntervals,
	        beast.evolution.tree.coalescent.Coalescent.tree,
	        beast.core.MCMC.state,
	        beast.core.MCMC.distribution,
	        beast.core.MCMC.init,
	        beast.evolution.speciation.BirthDeathGernhard08Model.relativeDeathRate,
	        beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
	        beast.evolution.speciation.BirthDeathGernhard08Model.type,
	        beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
	        beast.evolution.speciation.BirthDeathGernhard08Model.tree,
	        beast.evolution.tree.Tree.trait,
	        beast.util.TreeParser.initial,
	        beast.util.TreeParser.taxa,
	        beast.util.TreeParser.trait,
	        beast.util.TreeParser.estimate,
	        beast.util.ClusterTree.initial,
	        beast.util.ClusterTree.taxa,
	        beast.util.ClusterTree.trait,
	        beast.util.ClusterTree.estimate,
	        beast.evolution.substitutionmodel.WAG.rates,
	        beast.evolution.substitutionmodel.WAG.frequencies,
	        beast.core.Operator.weight,
            beast.math.distributions.Prior.x'
        buttonLabelMap='beast.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters'
    >

        <panel spec='beast.app.beauti.BeautiPanelConfig' panelname="Data" tiptext="Aligned sequence data"
            path='distribution/distribution[id="likelihood"]/distribution'
            hasPartitions="false" icon='0.png' forceExpansion='FALSE'
            type='beast.evolution.likelihood.TreeLikelihood'
        />

		<panel spec='beast.app.beauti.BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='distribution/distribution[id="likelihood"]/distribution/siteModel'
            hasPartitions="true" icon='3.png' forceExpansion='TRUE'
        />
		<panel spec='beast.app.beauti.BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='distribution/distribution[id="likelihood"]/distribution/branchRateModel'
            hasPartitions="true" icon='4.png' forceExpansion='TRUE'
        />
		<panel spec='beast.app.beauti.BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="false" icon='6.png' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<panel spec='beast.app.beauti.BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="false" icon='7.png' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'
        />
		<panel spec='beast.app.beauti.BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="false" icon='8.png' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<panel spec='beast.app.beauti.BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="false" icon='9.png' forceExpansion='TRUE'
        />


    </beauticonfig>

    <data id="#alignments"></data>


    <plate var='n' range='#alignments'>
        <mergepoint id='substitutionmodel'/>
        <mergepoint id='clockmodel'/>
    </plate>

    
	<taxonset id='taxonsuperset' spec='beast.evolution.alignment.TaxonSet'/>

    <tree spec='RandomTree' id='randomSpeciesTree' initial='@speciesTree'>
        <taxonset idref='taxonsuperset'/>
        <populationModel spec='ConstantPopulation'>
		<popSize spec='parameter.RealParameter' value='1'/>
	</populationModel>
    </tree>


<plate var='n' range='#alignments'>
    <tree spec='RandomGeneTree' id='randomGeneTree$(n)' 
	initial='@$(n).tree' speciesTree='@speciesTree' taxa='@$(n)'>
        <populationModel spec='ConstantPopulation'>
		<popSize spec='parameter.RealParameter' value='1'/>
	</populationModel>
    </tree>
</plate>

<run chainLength="10000000" id="mcmc" preBurnin="0" spec="MCMC">
    <init idref='randomSpeciesTree'/>

    <plate var='n' range='#alignments'>
        <init idref='randomGeneTree$(n)'/>
    </plate>

    <state id="State0" storeEvery="100000">
        <parameter dimension="1" estimate="false" id="mutationRate" name="stateNode" value="1.0"/>
        <parameter dimension="1" estimate="false" id="clockRate" name="stateNode" value="1.0"/>

        <stateNode idref='popSize'/> 
        <stateNode idref='popMean'/>

        <plate var='n' range='#alignments'>
            <parameter dimension="1" estimate="false" id="hky.kappa$(n)" lower="0.0" name="stateNode" value="1.0"/>
            <tree estimate="true" id="$(n).tree" name="stateNode"/>
        </plate>
        <tree estimate="true" id="speciesTree" name="stateNode"/>

        <stateNode idref="birthRate"/>
        <parameter dimension="1" estimate="false" id="gammaShape" name="stateNode" value="1.0"/>
        <parameter dimension="1" estimate="false" id="proportionInvariant" lower="0.0" name="stateNode" upper="1.0" value="0.0"/>
    </state>


    <distribution id="posterior" spec="util.CompoundDistribution">
        <distribution id="prior" spec="util.CompoundDistribution">

            <plate var='n' range='#alignments'>
                <distribution id='tree.prior.$(n)' spec='GeneTreeForSpeciesTreeDistribution' tree='@$(n).tree' speciesTree='@speciesTree' speciesTreePrior='@SpeciesTreePopSizePrior'/>
            </plate>

            <distribution id='SpeciesTreePopSizePrior' spec='SpeciesTreePrior' tree='@speciesTree' 
            		popFunction='constant' taxonset='@taxonsuperset'>
                <bottomPopSize spec='parameter.RealParameter' id='popSize' value='1'/> 
                <parameter name='gammaParameter' id='popMean' value='0.004'/>
            </distribution>

            <distribution id="SpeciesTreeDivergenceTimesPrior" spec="speciation.YuleModel" tree='@speciesTree'>
                <birthDiffRate spec='parameter.RealParameter' id="birthRate" value='213.2021' lower='0' upper='10000' />
            </distribution>

            <distribution id='birthRatePrior' spec='distributions.Prior' x='@birthRate'>
                <distr id='OneOnX' spec='distributions.OneOnX'/>
            </distribution>
            <distribution id="popMean.prior" spec="beast.math.distributions.Prior" x="@popMean" distr='@OneOnX'/>

            <plate var='n' range='#alignments'>
                <distribution id="kappa.prior$(n)" spec="beast.math.distributions.Prior" x="@hky.kappa$(n)">
                    <distr id='logNormal$(n)' spec='beast.math.distributions.LogNormalDistributionModel' M="1.0" S="1.25" offset="0.0" meanInRealSpace="false"/>
                </distribution>
            </plate>

        </distribution>
        <distribution id="likelihood" spec="util.CompoundDistribution">

            <plate var='n' range='#alignments'>
                <distribution data="@$(n)" id="treelikelihood.$(n)" spec="TreeLikelihood" tree="@$(n).tree" useAmbiguities="false">
                    <siteModel gammaCategoryCount="1" id="siteModel$(n)" mutationRate="@mutationRate" proportionInvariant="@proportionInvariant" shape="@gammaShape" spec="SiteModel">
                        <substModel id="hky$(n)" kappa="@hky.kappa$(n)" spec="HKY">
                            <frequencies id="freqs$(n)" spec="Frequencies" estimate='true' data='@$(n)'/>
                        </substModel>
                    </siteModel>
                    <branchRateModel clock.rate="@clockRate" id="StrictClockModel$(n)" spec="beast.evolution.branchratemodel.StrictClockModel"/>
                </distribution>
            </plate>
        </distribution>
    </distribution>


    <operator degreesOfFreedom="1" id="popSizeScaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.5" spec="ScaleOperator" parameter="@popSize" weight="5.0"/>
    <operator degreesOfFreedom="1" id="birthRateScaler" scaleFactor="0.5" spec="ScaleOperator" parameter="@birthRate" weight="3"/>
    <operator degreesOfFreedom="1" id="psiScaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.5" spec="ScaleOperator" parameter="@popMean" weight="94"/>

    <plate var='n' range='#alignments'>
        <mergepoint id='clockmodeloperators'/>
        <operator degreesOfFreedom="1" id="kappa$(n)Scaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.35" spec="ScaleOperator" parameter="@hky.kappa$(n)" weight="0.1"/>
        <operator gaussian="true" id="SubtreeSlide$(n)" size="0.003" spec="SubtreeSlide" tree="@$(n).tree" weight="15.0"/>
        <operator degreesOfFreedom="1" id="treeScaler$(n)" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.85" spec="ScaleOperator" tree="@$(n).tree" weight="6.0"/>
        <operator id="wide$(n)" isNarrow="false" spec="Exchange" tree="@$(n).tree" weight="1.0"/>
        <operator id="narrow$(n)" isNarrow="true" spec="Exchange" tree="@$(n).tree" weight="15"/>
        <operator id="WilsonBalding$(n)" spec="WilsonBalding" tree="@$(n).tree" weight="3"/>
        <operator id="Uniform$(n)" spec="Uniform" tree="@$(n).tree" weight="30.0"/>
    </plate>

	<operator spec='UpDownOperator' scaleFactor="0.75" weight="30">
			<up idref="birthRate"/>
			<down idref="popSize"/>
			<down idref="popMean"/>
			<down idref="speciesTree"/>
            <plate var='n' range='#alignments'>
    			<down idref="$(n).tree"/>
            </plate>
	</operator>

    <operator id="Reheight" spec="NodeReheight" tree="@speciesTree" weight="94" taxonset='@taxonsuperset'>
        <plate var='n' range='#alignments'>
            <genetree idref='$(n).tree'/>
        </plate>
    </operator>

    <logger fileName="$(seed).log" id="Trace.Logger0" logEvery="1000" mode="autodetect" model="@posterior">
        <log idref="posterior"/>
        <log idref="prior"/>
        <log idref="SpeciesTreePopSizePrior"/>
        <plate var='n' range='#alignments'>
            <log idref="tree.prior.$(n)"/>
        </plate>
        <log idref="SpeciesTreeDivergenceTimesPrior"/>
        <log idref="likelihood"/>
        <log idref="popMean"/>
        <log idref="birthRate"/>
        <plate var='n' range='#alignments'>
            <log idref="hky.kappa$(n)"/>
        </plate>
        <log idref="popSize"/>
        <log id="TreeHeightSP" spec="beast.evolution.tree.TreeHeightLogger" tree="@speciesTree"/>
        <plate var='n' range='#alignments'>
            <log id="TreeHeight$(n)" spec="beast.evolution.tree.TreeHeightLogger" tree="@$(n).tree"/>
        </plate>
    </logger>

    <logger fileName="$(seed).sp.trees" id="SpeciesTreeLogger" logEvery="1000" mode="tree">
        <log spec='SpeciesTreeLogger' popSize='@popSize' tree="@speciesTree"/>
    </logger>

    <plate var='n' range='#alignments'>
        <logger fileName="$(seed).$(n).trees" id="TreeLogger.$(n)" logEvery="1000" mode="autodetect">
            <log idref="$(n).tree"/>
        </logger>
    </plate>

    <logger id="ScreenLogger" logEvery="100000" mode="autodetect">
        <log idref="posterior"/>
        <log spec='ESS' arg='@posterior'/>
        <log idref="prior"/>
        <log spec='ESS' arg='@prior'/>
    </logger>

</run>


</beast>

-->


