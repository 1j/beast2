<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>

<map name='connect'>beast.app.beauti.BeautiConnector</map>
<map name='subtemplate'>beast.app.beauti.BeautiSubTemplate</map>

    <beauticonfig spec='BeautiConfig'
        inputLabelMap='beast.core.MCMC.operator=Operators,
	        beast.core.MCMC.logger=Loggers'
        inlinePlugins ='beast.core.MCMC.distribution,
            beast.evolution.sitemodel.SiteModel.substModel,
            beast.evolution.tree.coalescent.ExponentialGrowth,
            beast.evolution.tree.coalescent.ConstantPopulation,
            beast.evolution.tree.coalescent.Coalescent,
            beast.core.State.stateNode'
        collapsedPlugins ='beast.core.MCMC.logger'
        suppressPlugins = 'beast.core.MCMC.operator,
		beast.core.MCMC.operatorschedule,
	        beast.evolution.tree.coalescent.Coalescent.treeIntervals,
	        beast.evolution.tree.coalescent.Coalescent.tree,
	        beast.core.MCMC.state,
	        beast.core.MCMC.distribution,
	        beast.core.MCMC.init,
	        beast.evolution.speciation.BirthDeathGernhard08Model.relativeDeathRate,
	        beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
	        beast.evolution.speciation.BirthDeathGernhard08Model.type,
	        beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
	        beast.evolution.speciation.BirthDeathGernhard08Model.tree,
	        beast.evolution.tree.Tree,
	        beast.evolution.tree.Tree.trait,
	        beast.evolution.tree.Tree.taxa,
	        beast.evolution.tree.Tree.taxonset,
	        beast.evolution.tree.RandomTree.trait,
	        beast.evolution.tree.RandomTree.initial,
	        beast.evolution.tree.RandomTree.taxa,
	        beast.evolution.tree.RandomTree.taxonset,
	        beast.evolution.tree.RandomTree.estimate,
	        beast.util.TreeParser.initial,
	        beast.util.TreeParser.taxa,
	        beast.util.TreeParser.taxonset,
	        beast.util.TreeParser.trait,
	        beast.util.TreeParser.estimate,
	        beast.util.ClusterTree.initial,
	        beast.util.ClusterTree.taxa,
	        beast.util.ClusterTree.taxonset,
	        beast.util.ClusterTree.trait,
	        beast.util.ClusterTree.estimate,
	        beast.evolution.substitutionmodel.WAG.rates,
	        beast.evolution.substitutionmodel.WAG.frequencies,
	        beast.evolution.substitutionmodel.JTT.rates,
	        beast.evolution.substitutionmodel.JTT.frequencies,
	        beast.evolution.substitutionmodel.Blosum62.rates,
	        beast.evolution.substitutionmodel.Blosum62.frequencies,
	        beast.evolution.substitutionmodel.Dayhoff.rates,
	        beast.evolution.substitutionmodel.Dayhoff.frequencies,
	        beast.evolution.substitutionmodel.CPREV.rates,
	        beast.evolution.substitutionmodel.CPREV.frequencies,
	        beast.evolution.substitutionmodel.MTREV.rates,
	        beast.evolution.substitutionmodel.MTREV.frequencies,
	        beast.evolution.substitutionmodel.GTR.rates,
	        beast.evolution.substitutionmodel.JukesCantor.frequencies,
            beast.math.distributions.Prior.x,
            beast.math.distributions.MRCAPrior.tree,
            beast.math.distributions.MRCAPrior.monophyletic,
            beast.math.distributions.MRCAPrior.taxonset,
            beast.evolution.branchratemodel.UCRelaxedClockModel.tree,
            beast.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
            beast.evolution.branchratemodel.RandomLocalClockModel.tree,
            beast.evolution.branchratemodel.RandomLocalClockModel.meanRate,
            beast.evolution.branchratemodel.RandomLocalClockModel.indicators,
            beast.evolution.operators.ScaleOperator.indicator,
	        beast.core.Operator.weight,
			beast.evolution.speciation.GeneTreeForSpeciesTreeDistribution.speciesTree,
			beast.evolution.speciation.GeneTreeForSpeciesTreeDistribution.speciesTreePrior,
			beast.evolution.speciation.GeneTreeForSpeciesTreeDistribution.treetop,
			beast.evolution.speciation.GeneTreeForSpeciesTreeDistribution.tree,
			beast.evolution.speciation.GeneTreeForSpeciesTreeDistribution.treeIntervals,
			beast.evolution.speciation.SpeciesTreePrior.bottomPopSize,
			beast.evolution.speciation.SpeciesTreePrior.topPopSize,
			beast.evolution.speciation.SpeciesTreePrior.taxonset,
			beast.evolution.speciation.SpeciesTreePrior.tree,
			beast.evolution.speciation.SpeciesTreePrior.treeIntervals,
			beast.evolution.speciation.YuleModel.treeIntervals,
			beast.evolution.speciation.YuleModel.useTipDates,
			beast.evolution.speciation.YuleModel.tree,
            beast.core.Logger.model
            '
        buttonLabelMap='beast.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters'
    >


        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png' forceExpansion='FALSE'
            type='beast.evolution.alignment.Alignment'
        />
		<panel spec='BeautiPanelConfig' panelname="Taxon sets" tiptext="Specify taxon sets that make up species"
            path='distribution/distribution[id="speciescoalescent"]/distribution[id="SpeciesTreePopSize.Species"]/taxonset'
            hasPartitions="none" icon='1.png' forceExpansion='TRUE'
        />
		<panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png' forceExpansion='TRUE'
        />
		<panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png' forceExpansion='TRUE'
        />
		<panel spec='BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="none" icon='6.png' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<panel spec='BeautiPanelConfig' panelname="Multi Species Coalescent" tiptext="Multi Species Coalescent specific settings"
            path='distribution/distribution[id="speciescoalescent"]/distribution'
            hasPartitions="none" icon='2.png' forceExpansion='TRUE'
        />
		<panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'
        />
		<panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
		<panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png' forceExpansion='TRUE'
        />


        <partitiontemplate id='xxx' spec='BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[

		    <distribution id='treePrior.$(n)' spec='GeneTreeForSpeciesTreeDistribution' tree='@Tree.$(n)' speciesTree='@Tree.Species' speciesTreePrior='@SpeciesTreePopSize.Species'/>

            <!-- site model                                                              -->
            <plugin spec='SiteModel' id="SiteModel.$(n)" gammaCategoryCount='0'>
                <substModel spec='JukesCantor' id='JC69.$(n)'/>
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.$(n)' value='0.0' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.$(n)' value='1.0'         estimate='false'/>
            </plugin>

            <plugin spec='TreeLikelihood' id="treeLikelihood.$(n)">
                <data idref="data"/>
                <tree idref="Tree.$(n)"/>
                <siteModel idref="SiteModel.$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.$(n)'>
                    <clock.rate id='clockRate.$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

	        <plugin id='ClockPrior.$(n)' spec='Prior' x='@clockRate.$(n)'><distr spec="OneOnX"/></plugin>
	        <plugin id='MutationRatePrior.$(n)' spec='Prior' x='@mutationRate.$(n)'><distr spec="OneOnX"/></plugin>

            <!-- tree and its properties -->
            <taxonset id='TaxonSet.$(n)' spec='beast.evolution.alignment.TaxonSet' alignment='@$(n)' />
            <plugin spec='beast.evolution.tree.Tree' id='Tree.$(n)' taxonset='@TaxonSet.$(n)'/>

            <!--plugin spec='beast.evolution.tree.RandomTree' id='RandomTree.$(n)' estimate='false' trait='@datetrait.$(n)' initial='@Tree.$(n)'-->
			<tree spec='RandomGeneTree' id='RandomGeneTree.$(n)' initial='@Tree.$(n)' speciesTree='@Tree.Species' taxa='@$(n)'>
				<populationModel id='RGTPopulationModel.$(n)' spec='ConstantPopulation'><popSize id='RGTPopSize.$(n)' spec='parameter.RealParameter' value='1'/></populationModel>
			</tree>

            <plugin id='TreeHeight.$(n)' spec='beast.evolution.tree.TreeHeightLogger' tree='@Tree.$(n)'/>

            <logger id='treelog.$(n)' spec='beast.core.Logger' logEvery="5000" fileName="$(n).$(seed).trees" mode='tree'>
                <log idref="Tree.$(n)"/>
            </logger>

            <operator id='proportionInvariantScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@proportionInvariant.$(n)"/>
            <operator id='mutationRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@mutationRate.$(n)"/>
            <operator id='gammaShapeScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@gammaShape.$(n)"/>

            <operator id='treeScaler.$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" tree="@Tree.$(n)"/>
            <operator id='UniformOperator.$(n)' spec='Uniform' weight="10" tree="@Tree.$(n)"/>
            <operator id='SubtreeSlide.$(n)' spec='SubtreeSlide' weight="5" gaussian="true" size="1.0" tree="@Tree.$(n)"/>
            <operator id='narrow.$(n)' spec='Exchange' isNarrow='true' weight="1" tree="@Tree.$(n)"/>
            <operator id='wide.$(n)' spec='Exchange' isNarrow='false' weight="1" tree="@Tree.$(n)"/>
            <operator id='WilsonBalding.$(n)' spec='WilsonBalding' weight="1" tree="@Tree.$(n)"/>

            <operator id='updown.$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="5">
                <up idref="clockRate.$(n)"/>
                <down idref="Tree.$(n)"/>
            </operator>

            <prior id='GammaShapePrior.$(n)' spec='Prior' x='@gammaShape.$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1000'/></prior>
			<operator id='StrictClockRateScaler.$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.$(n)'/>
			<!-- need updown operator for clockRate?!? Also in SubstModel.xml -->


]]>
            <connect srcID='treeLikelihood.$(n)'       targetID='likelihood' inputName='distribution' if="isInitializing"/>

            <connect srcID='treelog.$(n)'              targetID='mcmc' inputName='logger' if='inposterior(Tree.$(n))'/>
            <connect srcID='RandomGeneTree.$(n)'       targetID='mcmc' inputName='init' if='inposterior(Tree.$(n))'/>

            <connect srcID='treePrior.$(n)'            targetID='speciescoalescent' inputName='distribution' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='ClockPrior.$(n)'           targetID='prior' inputName='distribution' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>
            <connect srcID='MutationRatePrior.$(n)'    targetID='prior' inputName='distribution' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect srcID='popMean.prior'             targetID='prior' inputName='distribution' if='popMean/estimate=true'/>

            <connect srcID='Tree.$(n)'                 targetID='state' inputName='stateNode' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.$(n)'  targetID='state' inputName='stateNode' if='inposterior(proportionInvariant.$(n)) and proportionInvariant.$(n)/estimate=true'/>
            <connect srcID='mutationRate.$(n)'         targetID='state' inputName='stateNode' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect srcID='gammaShape.$(n)'           targetID='state' inputName='stateNode' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect srcID='clockRate.$(n)'            targetID='state' inputName='stateNode' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect srcID='proportionInvariantScaler.$(n)' targetID='mcmc' inputName='operator' if='inposterior(proportionInvariant.$(n)) and proportionInvariant.$(n)/estimate=true'/>
            <connect srcID='mutationRateScaler.$(n)'        targetID='mcmc' inputName='operator' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect srcID='gammaShapeScaler.$(n)'          targetID='mcmc' inputName='operator' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect srcID='StrictClockRateScaler.$(n)'     targetID='mcmc' inputName='operator' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>
            <connect srcID='popMeanScale'                   targetID='mcmc' inputName='operator' if='popMean/estimate=true'/>

            <connect srcID='treeScaler.$(n)'                targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='UniformOperator.$(n)'           targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='SubtreeSlide.$(n)'              targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='narrow.$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='wide.$(n)'                      targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='WilsonBalding.$(n)'             targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='updown.$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true and clockRate.$(n)/estimate=true'/>

            <connect srcID='TreeHeight.$(n)'           targetID='tracelog' inputName='log' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.$(n)'  targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.$(n)) and proportionInvariant.$(n)/estimate=true'/>
            <connect srcID='mutationRate.$(n)'         targetID='tracelog' inputName='log' if='inposterior(mutationRate.$(n)) and mutationRate.$(n)/estimate=true'/>
            <connect srcID='gammaShape.$(n)'           targetID='tracelog' inputName='log' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect srcID='clockRate.$(n)'            targetID='tracelog' inputName='log' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect srcID='GammaShapePrior.$(n)'      targetID='prior' inputName='distribution' if='inposterior(gammaShape.$(n)) and gammaShape.$(n)/estimate=true'/>
            <connect srcID='Tree.$(n)'        targetID='Reheight' inputName='genetree' if='Tree.$(n)/estimate=true'/>

	    <connect srcID='Tree.$(n)'        targetID='updown.all' inputName='down' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
	    <connect srcID='clockRate.$(n)'   targetID='updown.all' inputName='up' if='inposterior(clockRate.$(n)) and clockRate.$(n)/estimate=true'/>

            <connect srcID='popSizeTopScaler' targetID='mcmc' inputName='operator' if='SpeciesTreePopSize.Species/popFunction!=constant'/>
            <connect srcID='Tree.$(n)'        targetID='treeTopFinder' inputName='tree' if='inposterior(Tree.$(n)) and Tree.$(n)/estimate=true'/>
            <connect srcID='treeTopFinder'    targetID='treePrior.$(n)' inputName='treetop' if='SpeciesTreePopSize.Species/popFunction=linear'/>
			<!-- 
			Since 'Species' is treated as a separate partition, we need the following
			hack to get rid of undesirable Tree.Species connections 
			-->
            <connect srcID='Tree.Species'     targetID='Reheight' inputName='genetree' if='Tree.$(n)/estimate=XXX'/>
            <connect srcID='Tree.Species'     targetID='treeTopFinder' inputName='tree' if='Tree.$(n)/estimate=XXX'/>
        </partitiontemplate>

		<mergepoint id='substModelTemplates'/>
		<mergepoint id='clockModelTemplates'/>
		<mergepoint id='treePriorTemplates'/>
        <mergepoint id='parametricDistributions'/>

    </beauticonfig>


	<taxonset spec='beast.evolution.alignment.TaxonSet' id='taxonsuperset'>
		<taxon spec='beast.evolution.alignment.TaxonSet' id='Beauti2DummyTaxonSet'>
			<taxon spec='beast.evolution.alignment.Taxon' id='dummyTaxon'/>
		</taxon>
	</taxonset>

	<tree spec='beast.evolution.tree.Tree' id='Tree.Species' taxonset='@taxonsuperset'/>

	<treetop spec='TreeTopFinder' id='treeTopFinder'/>

<!-- framework for main model -->
    <run spec="MCMC" id="mcmc" storeEvery="5000" chainLength="10000000">

        <state storeEvery='5000' id='state'>
	        <stateNode idref='popSize'/> 
	        <stateNode idref='popSizeTop'/> 
	        <stateNode idref='Tree.Species'/> 
	        <stateNode idref='birthRate.Species'/> 
	        <stateNode idref='popMean'/> 
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="speciescoalescent">
				<distribution id='SpeciesTreePopSize.Species' spec='SpeciesTreePrior' tree='@Tree.Species' 
						popFunction='constant' taxonset='@taxonsuperset'>
				    <bottomPopSize spec='parameter.RealParameter' id='popSize' value='1'/> 
			        <topPopSize spec='parameter.RealParameter' id='popSizeTop' value='1'/> 
				    <parameter name='gammaParameter' id='popMean' value='1' estimate="true"/>
				</distribution>
			</distribution>
            <distribution spec="CompoundDistribution" id="prior">
			    <!-- species tree priors -->
		        <distribution id="YuleModel.Species" spec="speciation.YuleModel" tree='@Tree.Species'>
		            <birthDiffRate spec='parameter.RealParameter' id="birthRate.Species" value='213.2021' lower='0' upper='10000' />
		        </distribution>
	            <distribution id='YuleBirthRatePrior.Species' spec='Prior' x='@birthRate.Species'>
		             <distr spec="beast.math.distributions.OneOnX"/>
		        </distribution>
	            <distribution id='popMean.prior' spec='Prior' x='@popMean'>
		            <distr spec="beast.math.distributions.OneOnX"/>
		        </distribution>
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood">
            </distribution>
        </distribution>

	<operator id="Reheight" spec="NodeReheight" tree="@Tree.Species" weight="94" taxonset='@taxonsuperset'/>
	<operator degreesOfFreedom="1" id="popSizeScaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.5" spec="ScaleOperator" parameter="@popSize" weight="5.0"/>
	<operator degreesOfFreedom="1" id="popSizeTopScaler" scaleAll="false" scaleAllIndependently="false" scaleFactor="0.5" spec="ScaleOperator" parameter="@popSizeTop" weight="5.0"/>

	<operator id="updown.all" spec='UpDownOperator' scaleFactor="0.75" weight="20">
	  <up idref="birthRate.Species"/>
	  <down idref="popMean"/>

	  <down idref="Tree.Species"/>
	</operator>
	
	<operator id='YuleBirthRateScaler.Species' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate.Species"/>

	<operator id='popMeanScale' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@popMean"/>

        <logger id='tracelog' logEvery="5000" fileName="beast_$(seed).log">
	        <model idref='posterior'/>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
			<log idref="speciescoalescent"/>
			<log idref="birthRate.Species"/>
			<log idref="YuleModel.Species"/>
        </logger>

		<logger fileName="species_$(seed).trees" id="speciesTreeLogger" logEvery="5000" mode="tree">
		    <log spec='SpeciesTreeLogger' popSize='@popSize' popSizeTop="@popSizeTop" tree="@Tree.Species" speciesTreePrior='@SpeciesTreePopSize.Species' treetop='@treeTopFinder'/>
		</logger>

        <logger id='screenlog' logEvery="5000">
	        <model idref='posterior'/>
            <log idref="posterior"/>
      	    <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>




